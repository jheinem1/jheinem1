{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"# Programming\nThis is a Dendron vault dedicated to a bunch of notes for programming languages and other things.","n":0.236}}},{"i":2,"$":{"0":{"v":"Paradigm","n":1},"1":{"v":"\nA style of programming or the structure of a programming language.","n":0.302}}},{"i":3,"$":{"0":{"v":"Logic","n":1},"1":{"v":"\n- Treats a program as a set of facts, rules, and queries.\n- Goal is to eliminate progamming altogether- forces computer to do most of the structure.","n":0.196}}},{"i":4,"$":{"0":{"v":"Imperative","n":1},"1":{"v":"- Divides a program into modules or functions.\n- Has local/global variables.\n- Data structures.\n- Conditional statements.\n- Examples...\n    - [[lang.c]]\n    - [[lang.javascript]]\n    - [[lang.luau]]\n- [[paradigm.imperative.oop]] is a subset of this paradigm.","n":0.186}}},{"i":5,"$":{"0":{"v":"OOP","n":1},"1":{"v":"\n## (Object Oriented Programming)","n":0.5}}},{"i":6,"$":{"0":{"v":"Functional","n":1},"1":{"v":"\n- Focus on abstraction.\n- Treats everything as a function.\n- Immutable data structures.\n- Examples...\n    - [[lang.lisp]]\n    - [[lang.haskell]]","n":0.243}}},{"i":7,"$":{"0":{"v":"Concurrent","n":1},"1":{"v":"\nFocuses on concurrent execution; [read more here](https://en.wikipedia.org/wiki/Concurrent_computing).","n":0.378}}},{"i":8,"$":{"0":{"v":"Lang","n":1},"1":{"v":"\nProgramming languages.","n":0.707}}},{"i":9,"$":{"0":{"v":"Luau","n":1},"1":{"v":"\n>[Luau (lowercase u, /ˈlu.aʊ/) is a fast, small, safe, gradually typed embeddable scripting language derived from Lua.](https://github.com/Roblox/luau)\n\nLuau is essentially a superset of [[lang.lua]] 5.1, including similar type syntax to [[lang.typescript]].\n\n## Download\n[https://github.com/Roblox/luau/releases/tag/0.507](https://github.com/Roblox/luau/releases/tag/0.507)","n":0.18}}},{"i":10,"$":{"0":{"v":"Types","n":1}}},{"i":11,"$":{"0":{"v":"Vector","n":1},"1":{"v":"\nAlias for [[lang.luau.types.userdata.vector3]].","n":0.577}}},{"i":12,"$":{"0":{"v":"Userdata","n":1},"1":{"v":"\nPlaceholder type for additional types (generally implemented in C++).\n\n## Creation\nCreated using the [[lang.luau.globals.newproxy]] function. Generally used for Roblox API types such as the [[lang.luau.types.userdata.instance]].","n":0.204}}},{"i":13,"$":{"0":{"v":"Vector3int16","n":1},"1":{"v":"\nA lower precision version of [[lang.luau.types.userdata.vector3]] meant for use with [[lang.luau.types.userdata.region3int16]]. Shares all the same constructors, methods, and properties.","n":0.229}}},{"i":14,"$":{"0":{"v":"Vector3","n":1},"1":{"v":"\nA set of 3 numbers ([[lang.luau.types.userdata.vector3.x]], [[lang.luau.types.userdata.vector3.y]], [[lang.luau.types.userdata.vector3.z]]), generally representing a point in 3D space. For a lower precision version, see [[lang.luau.types.userdata.vector3int16]].","n":0.213}}},{"i":15,"$":{"0":{"v":"Vector3.zero","n":1},"1":{"v":"**[static]**\n\nReturns a [[lang.luau.types.userdata.vector3]] with the values `0, 0, 0`.\n## Examples\n```Lua\nprint(Vector3.zero) --> 0, 0, 0\n```","n":0.267}}},{"i":16,"$":{"0":{"v":"Vector3.zAxis","n":1},"1":{"v":"**[static]**\n\nA [[lang.luau.types.userdata.vector3]] with the [[lang.luau.types.userdata.vector3.z]] value `1`.\n## Examples\n```Lua\nprint(Vector3.zAxis) --> 0, 0, 1\n```","n":0.289}}},{"i":17,"$":{"0":{"v":"Vector3.Z","n":1},"1":{"v":"\nThe Z-coordinate of a [[lang.luau.types.userdata.vector3]].\n","n":0.447}}},{"i":18,"$":{"0":{"v":"Vector3.yAxis","n":1},"1":{"v":"**[static]**\n\nA [[lang.luau.types.userdata.vector3]] with the [[lang.luau.types.userdata.vector3.y]] value `1`.\n## Examples\n```Lua\nprint(Vector3.yAxis) --> 0, 1, 0\n```","n":0.289}}},{"i":19,"$":{"0":{"v":"Vector3.Y","n":1},"1":{"v":"\nThe Y-coordinate of a [[lang.luau.types.userdata.vector3]].","n":0.447}}},{"i":20,"$":{"0":{"v":"Vector3.xAxis","n":1},"1":{"v":"**[static]**\n\nA [[lang.luau.types.userdata.vector3]] with the [[lang.luau.types.userdata.vector3.x]] value `1`.\n## Examples\n```Lua\nprint(Vector3.xAxis) --> 1, 0, 0\n```","n":0.289}}},{"i":21,"$":{"0":{"v":"Vector3.X","n":1},"1":{"v":"\nThe X-coordinate of a [[lang.luau.types.userdata.vector3]].","n":0.447}}},{"i":22,"$":{"0":{"v":"Vector3.Unit","n":1},"1":{"v":"A normalized copy of a [[lang.luau.types.userdata.vector3]] (has the same direction but the magnitude is set to `0`).","n":0.243}}},{"i":23,"$":{"0":{"v":"Vector3.one","n":1},"1":{"v":"**[static]**\n\nReturns a [[lang.luau.types.userdata.vector3]] with the values `1, 1, 1`.\n## Examples\n```Lua\nprint(Vector3.one) --> 1, 1, 1\n```","n":0.267}}},{"i":24,"$":{"0":{"v":"Vector3.new","n":1},"1":{"v":"One of the 3 constructors of the [[lang.luau.types.userdata.vector3]].\n```Lua\nVector3.new(x=0, y=0, z=0)\n```\n## Examples\n```Lua\nlocal myVector3: Vector3 = Vector3.new(13, 42, 42.5)\n```","n":0.243}}},{"i":25,"$":{"0":{"v":"Vector3.Magnitude","n":1},"1":{"v":"\nThe length of a Vector3. Calculated using the formula $|\\vec{AB}|=\\sqrt{(x_1-x_0)^2+(y_1-y_0)^2}$ (the distance formula).","n":0.277}}},{"i":26,"$":{"0":{"v":"Vector3.fromNormalId","n":1},"1":{"v":"Constructs a new Vector3 in a particular direction using a [[lang.luau.types.userdata.enum.normalid]].\n```Lua\nVector3.fromNormalId(NormalId normalId)\n```\n## Example\n```Lua\nlocal myVector3 = Vector3.fromNormalId(Enum.NormalId.Front)\n```","n":0.25}}},{"i":27,"$":{"0":{"v":"Vector3 + Vector3","n":0.577},"1":{"v":"Adds two [[lang.luau.types.userdata.vector3]]s together.\n## Examples\n```Lua\nprint(Vector3.zero + Vector3.xAxis) --> 1, 0, 0\n```","n":0.302}}},{"i":28,"$":{"0":{"v":"Instance","n":1},"1":{"v":"\nSubtype of userdata used for interacting with instances in the instance tree. All documentation relating to instances can be found [here](https://robloxapi.github.io/ref/index.html).","n":0.218}}},{"i":29,"$":{"0":{"v":"Enum","n":1}}},{"i":30,"$":{"0":{"v":"Enum.NormalId","n":1},"1":{"v":"\nUsed to indicate a direction/face.","n":0.447}}},{"i":31,"$":{"0":{"v":"Enum.NormalId.Top","n":1},"1":{"v":"\n## Value: `1`","n":0.577}}},{"i":32,"$":{"0":{"v":"Enum.NormalId.Right","n":1},"1":{"v":"\n## Value : `0`","n":0.5}}},{"i":33,"$":{"0":{"v":"Enum.NormalId.Left","n":1},"1":{"v":"\n## Value: `3`","n":0.577}}},{"i":34,"$":{"0":{"v":"Enun.NormalId.Front","n":1},"1":{"v":"\n## Value: `5`","n":0.577}}},{"i":35,"$":{"0":{"v":"Enum.NormalId.Bottom","n":1},"1":{"v":"\n## Value: `4`","n":0.577}}},{"i":36,"$":{"0":{"v":"Enum.NormalId.Back","n":1},"1":{"v":"\n## Value: `2`","n":0.577}}},{"i":37,"$":{"0":{"v":"Thread","n":1},"1":{"v":"\nA representation of a thread used by the [[lang.luau.library.coroutine]] library for asynchronous code.","n":0.277}}},{"i":38,"$":{"0":{"v":"Table","n":1},"1":{"v":"\nA generic data structure with an array and hashmap portion. Can store any datatype in Luau as either a value or key. In addition to basic syntax, the [[lang.luau.library.table]] is used to manipulate tables, and [[lang.luau.globals.pairs]] and [[lang.luau.globals.ipairs]] are used to iterate over tables. Arrays in Luau start at `1` instead of `0`.\n\nTo get a value from a table that has non-string keys, the syntax `t[k]` is used. Similar syntax is used for assignment (`t[k] = v`). Luau offers a cleaner way to get string keys that conform to variable syntax; `t.k` and `t.k = v` respectively.\n\nTo get the length of the array portion of a table, the `#` operator is used- `#t`, and will return an integer.\n\nMost of the functionality of tables can be overloaded through the use of the [[lang.luau.metatable]].\n\n## Examples\n### Array\n```Lua\nlocal t = {1, 2, 3, 4, 5}\nprint(t[1]) --> 1\nprint(t[5]) --> 5\n```\n### Dictionary/Object\n```Lua\nlocal obj = {\n    Key = 13,\n    [true] = 14,\n    [3] = function() print(\"Hello World!\") end\n}\n-- These two are both methods of accessing string keys\nprint(obj.Key) --> 13\nprint(obj[\"Key\"]) --> 13\n-- Any type can be used as a key in Luau\nprint(obj[true]) --> 14\n-- Any type can be used as a value in Luau\nobj[3]() --> \"Hello World!\"\n```\n### Hybrid\n```Lua\nlocal t = {\n    [1] = 1,\n    [2] = 2,\n    [\"Hello World!\"] = false\n}\nprint(#t) --> 2\nprint(t[2]) --> 2\nprint(t[\"Hello World!\"]) --> false\n```","n":0.067}}},{"i":39,"$":{"0":{"v":"String","n":1},"1":{"v":"\nAn immutable array of characters with a max size of `1<<30`. All functions of the [[lang.luau.library.string]] can be called as methods on strings.","n":0.209}}},{"i":40,"$":{"0":{"v":"Number","n":1}}},{"i":41,"$":{"0":{"v":"Boolean","n":1}}},{"i":42,"$":{"0":{"v":"Metatable","n":1},"1":{"v":"\nA metatable is a table full of metamethods which overload the functionality of existing types in Luau. Under the hood, every operator in Luau is essentially a function call. Metatables are primarily used to add functionality to [[lang.luau.types.userdata]], which can easily be implemented in C++.\n\n## Metamethods\n\nMetamethods are functions within metatables such as [[lang.luau.metatable.__index]] and [[lang.luau.metatable.__add]] that define the behavior of operators in Luau acting on a given type.\n\n## Interaction\n\n[[lang.luau.globals.setmetatable]] and [[lang.luau.globals.getmetatable]] are primarily used to interact with metatables.","n":0.113}}},{"i":43,"$":{"0":{"v":"__unm","n":1},"1":{"v":"```Lua\n__unm<T>(self: T): unknown\n```\nFires when the unary – operator is used on the table.","n":0.277}}},{"i":44,"$":{"0":{"v":"__tostring","n":1},"1":{"v":"```Lua\n__tostring<T>(self: T): string\n```\nFired when tostring is called on the table. Also fired when encoding tables to JSON (something to note because table keys can have objects with custom metatables).","n":0.186}}},{"i":45,"$":{"0":{"v":"__sub","n":1},"1":{"v":"```Lua\n__sub<T>(self: T, value: unknown): unknown\n```\nThe – subtraction operator.","n":0.354}}},{"i":46,"$":{"0":{"v":"__pow","n":1},"1":{"v":"```Lua\n__pow<T>(self: T, value: unknown): unknown\n```\nThe ^ exponentiation operator.","n":0.354}}},{"i":47,"$":{"0":{"v":"__newindex","n":1},"1":{"v":"```Lua\n__newindex<T>(self: T, key: unknown, value: unknown): nil\n```\nOR\n```Lua\n__newindex: table\n```\nFires when table[index] tries to be set (table[index] = value), if table[index] is nil. Can also be set to a table, in which case that table will be indexed.","n":0.167}}},{"i":48,"$":{"0":{"v":"__namecall","n":1},"1":{"v":"```Lua\n__namecall<T>(self: T, ...args): unknown\n```\nFired when methods are called on Roblox userdata. Cannot be implemented in Luau and not included in the base language. The method name is passed separately.","n":0.186}}},{"i":49,"$":{"0":{"v":"__mul","n":1},"1":{"v":"```Lua\n__mul<T>(self: T, value: unknown): unknown\n```\nThe * mulitplication operator.","n":0.354}}},{"i":50,"$":{"0":{"v":"__mode","n":1},"1":{"v":"```Lua\n__mode: \"k\" | nil\n```\nDeclares references in keys/values as either weak or strong.","n":0.289}}},{"i":51,"$":{"0":{"v":"__mod","n":1},"1":{"v":"```Lua\n__mod<T>(self: T, value: unknown): unknown\n```\nThe % modulus operator.","n":0.354}}},{"i":52,"$":{"0":{"v":"__metatable","n":1},"1":{"v":"```Lua\n__metatable: unknown | nil\n```\nIf present, locks the metatable so getmetatable will return this instead of the metatable and setmetatable will error. Non-function value.","n":0.209}}},{"i":53,"$":{"0":{"v":"__lt","n":1},"1":{"v":"```Lua\n__lt<T>(self: T, value: T): boolean\n```\nThe < less than operator¹; **NOTE**: Using the >= greater than or equal to operator will invoke this metamethod and return the opposite of what this returns, as greater than or equal to is the same as not less than.Requires two values with the same metatable and basic type (table/userdata/etc.); does not work with a table and another random table, or with a userdata and a table.","n":0.119}}},{"i":54,"$":{"0":{"v":"__len","n":1},"1":{"v":"```Lua\n__len<T>(self: T): number\n```\nFired when the # length operator is used on the Object. NOTE: Only userdatas actually respect the __len() metamethod in Lua 5.1.","n":0.204}}},{"i":55,"$":{"0":{"v":"__le","n":1},"1":{"v":"```Lua\n__le<T>(self: T, value: T): boolean\n```\nThe <= operator; NOTE: Using the > greater than operator will invoke this metamethod and return the opposite of what this returns, as greater than is the same as not less than or equal to. Requires two values with the same metatable and basic type (table/userdata/etc.); does not work with a table and another random table, or with a userdata and a table.","n":0.122}}},{"i":56,"$":{"0":{"v":"__index","n":1},"1":{"v":"```Lua\n__index<T>(self: T, key: unknown): typeof T[key]\n```\nOR\n```Lua\n__index: table\n```\nFires when self[key] is indexed, if self[key] is nil. Can also be set to a table, in which case that table will be indexed.","n":0.183}}},{"i":57,"$":{"0":{"v":"__gc","n":1},"1":{"v":"```Lua\n__gc<T>(self: T): unknown\n```\nFired when the table is garbage-collected. NOTE: On Roblox, this metamethod is disabled.","n":0.258}}},{"i":58,"$":{"0":{"v":"__eq","n":1},"1":{"v":"```Lua\n__eq<T>(self: T, value: T): boolean\n```\nThe == equal to operator. Requires two values with the same metatable and basic type (table/userdata/etc.); does not work with a table and another random table, or with a userdata and a table.","n":0.164}}},{"i":59,"$":{"0":{"v":"__div","n":1},"1":{"v":"```Lua\n__div<T>(self: T, value: unknown): unknown\n```\nThe / division operator.","n":0.354}}},{"i":60,"$":{"0":{"v":"__concat","n":1},"1":{"v":"```Lua\n__concat<T>(self: T, value: unknown): unknown\n```\nFires when the .. concatenation operator is used on the table.","n":0.258}}},{"i":61,"$":{"0":{"v":"__call","n":1},"1":{"v":"```Lua\n__call<T>(self: T, ...unknown): unknown\n```\nFires when the table is called like a function, ... is the arguments that were passed.","n":0.229}}},{"i":62,"$":{"0":{"v":"__add","n":1},"1":{"v":"```Lua\n__add<T>(self: T, value: unknown): unknown\n```\nThe + addition operator.","n":0.354}}},{"i":63,"$":{"0":{"v":"Library","n":1}}},{"i":64,"$":{"0":{"v":"Table","n":1},"1":{"v":"Library of functions used for table manipulation.","n":0.378}}},{"i":65,"$":{"0":{"v":"table.find","n":1},"1":{"v":"```Lua\ntable.find(haystack: table, needle: unknown, init?: number): nil | number | unknown\n```\nWithin the given array-like table haystack, find the first occurrence of value needle, starting from index init or the beginning if not provided. If the value is not found, nil is returned.\n\nA linear search algorithm is performed.\n## Examples\n```Lua\nlocal t = {\"a\", \"b\", \"c\", \"d\", \"e\"}\nprint(table.find(t, \"d\")) --> 4\nprint(table.find(t, \"z\")) --> nil, because z is not in the table\nprint(table.find(t, \"b\", 3)) --> nil, because b appears before index 3\n```","n":0.113}}},{"i":66,"$":{"0":{"v":"table.create","n":1},"1":{"v":"```Lua\ntable.create(count: number, value?: unknown): table\n```\nGiven an array where all elements are strings or numbers, returns the string t[i] … sep … t[i+1] … sep … t[j]. The default value for sep is an empty string, the default for i is 1, and the default for j is #t. If i is greater than j, returns the empty string.","n":0.131}}},{"i":67,"$":{"0":{"v":"table.concat","n":1},"1":{"v":"```Lua\ntable.concat(t: {[number]: any}, separator?: string, i=1, j?: number): string\n```\nConcatenates the provided table into a string using the given separator.","n":0.229}}},{"i":68,"$":{"0":{"v":"table.clear","n":1},"1":{"v":"```Lua\ntable.clear(table: table): nil\n```\nSets the value for all keys within the given table to nil. This causes the # operator to return 0 for the given table. The allocated capacity of the table’s array portion is maintained, which allows for efficient re-use of the space.\n\nThis function does not delete/destroy the table provided to it. This function is meant to be used specifically for tables that are to be re-used.\n\n## Examples\n```Lua\nlocal grades = {95, 82, 71, 92, 100, 60}\nprint(grades[4], #grades) --> 92, 6\ntable.clear(grades)\nprint(grades[4], #grades) --> nil, 0\n-- If grades is filled again with the same number of entries,\n-- no potentially expensive array resizing will occur\n-- because the capacity was maintained by table.clear.\n```","n":0.095}}},{"i":69,"$":{"0":{"v":"String","n":1}}},{"i":70,"$":{"0":{"v":"Globals","n":1},"1":{"v":"\nGlobals included with Luau.","n":0.5}}},{"i":71,"$":{"0":{"v":"pairs","n":1}}},{"i":72,"$":{"0":{"v":"newproxy","n":1},"1":{"v":"\n```Lua\nnewproxy(addMetatable=false): userdata\n```\nCreates and returns a new userdata with or without a metatable. If created with a metatable it can be readily modified with [[lang.luau.globals.getmetatable]], and if not, will have to be created using [[lang.luau.globals.setmetatable]].\n\n## Example\n```Lua\nlocal myUserdata = newproxy(true)\ngetmetatable(myUserdata).__index = {1, 2, 3}\nprint(type(myUserdata)) --> \"userdata\"\nprint(myUserdata[1]) --> 1\n```\n","n":0.147}}},{"i":73,"$":{"0":{"v":"Dendron","n":1}}},{"i":74,"$":{"0":{"v":"Publish","n":1},"1":{"v":"\n## To publish to github pages, must perform the following:\nRun\n```\nnpm init -y\nnpm install @dendronhq/dendron-cli\n```\nto initialize the npm project and install the module.\n\nThen add `.next` to the `.gitignore` file.\n\nTo configure nextjs, run\n```\nnpx dendron publish init\n```\nand then add\n```\nsite:\n    assetsPrefix: /{REPO-NAME}\n    siteUrl: https://{GITHUB-USERNAME}.github.io[/{Optional subdomain}]\n```\nto the existing yaml tree in `root-schema.yaml`.\n\nThen you can run `npx dendron publish dev` to ensure the site is working, and finally \n```\nnpx dendron publish export --target github\n```\nto build.","n":0.12}}}]}
