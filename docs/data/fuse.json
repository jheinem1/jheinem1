{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"# Programming\nThis is a Dendron vault dedicated to a bunch of notes for programming languages and other things.","n":0.236}}},{"i":2,"$":{"0":{"v":"Paradigm","n":1},"1":{"v":"\nA style of programming or the structure of a programming language.","n":0.302}}},{"i":3,"$":{"0":{"v":"Logic","n":1},"1":{"v":"\n- Treats a program as a set of facts, rules, and queries.\n- Goal is to eliminate progamming altogether- forces computer to do most of the structure.","n":0.196}}},{"i":4,"$":{"0":{"v":"Imperative","n":1},"1":{"v":"- Divides a program into modules or functions.\n- Has local/global variables.\n- Data structures.\n- Conditional statements.\n- Examples...\n    - [[lang.c]]\n    - [[lang.javascript]]\n    - [[lang.luau]]\n- [[paradigm.imperative.oop]] is a subset of this paradigm.","n":0.186}}},{"i":5,"$":{"0":{"v":"OOP","n":1},"1":{"v":"\n## (Object Oriented Programming)","n":0.5}}},{"i":6,"$":{"0":{"v":"Functional","n":1},"1":{"v":"\n- Focus on abstraction.\n- Treats everything as a function.\n- Immutable data structures.\n- Examples...\n    - [[lang.lisp]]\n    - [[lang.haskell]]","n":0.243}}},{"i":7,"$":{"0":{"v":"Concurrent","n":1},"1":{"v":"\nFocuses on concurrent execution; [read more here](https://en.wikipedia.org/wiki/Concurrent_computing).","n":0.378}}},{"i":8,"$":{"0":{"v":"Lang","n":1},"1":{"v":"\nProgramming languages.","n":0.707}}},{"i":9,"$":{"0":{"v":"Luau","n":1},"1":{"v":"\n>[Luau (lowercase u, /ˈlu.aʊ/) is a fast, small, safe, gradually typed embeddable scripting language derived from Lua.](https://github.com/Roblox/luau)\n\nLuau is essentially a superset of [[lang.lua]] 5.1, including similar type syntax to [[lang.typescript]].\n\n## Download\n[https://github.com/Roblox/luau/releases/tag/0.507](https://github.com/Roblox/luau/releases/tag/0.507)","n":0.18}}},{"i":10,"$":{"0":{"v":"Types","n":1}}},{"i":11,"$":{"0":{"v":"Vector","n":1},"1":{"v":"\nAlias for [[lang.luau.types.userdata.vector3]].","n":0.577}}},{"i":12,"$":{"0":{"v":"Userdata","n":1},"1":{"v":"\nPlaceholder type for additional types (generally implemented in C++).\n\n## Creation\nCreated using the [[lang.luau.globals.newproxy]] function. Generally used for Roblox API types such as the [[lang.luau.types.userdata.instance]].","n":0.204}}},{"i":13,"$":{"0":{"v":"Vector3int16","n":1},"1":{"v":"\nA lower precision version of [[lang.luau.types.userdata.vector3]] meant for use with [[lang.luau.types.userdata.region3int16]]. Shares all the same constructors, methods, and properties.","n":0.229}}},{"i":14,"$":{"0":{"v":"Vector3","n":1},"1":{"v":"\nA set of 3 numbers ([[lang.luau.types.userdata.vector3.x]], [[lang.luau.types.userdata.vector3.y]], [[lang.luau.types.userdata.vector3.z]]), generally representing a point in 3D space. For a lower precision version, see [[lang.luau.types.userdata.vector3int16]].","n":0.213}}},{"i":15,"$":{"0":{"v":"Vector3.zero","n":1},"1":{"v":"**[static]**\n\nReturns a [[lang.luau.types.userdata.vector3]] with the values `0, 0, 0`.\n## Examples\n```Lua\nprint(Vector3.zero) --> 0, 0, 0\n```","n":0.267}}},{"i":16,"$":{"0":{"v":"Vector3.zAxis","n":1},"1":{"v":"**[static]**\n\nA [[lang.luau.types.userdata.vector3]] with the [[lang.luau.types.userdata.vector3.z]] value `1`.\n## Examples\n```Lua\nprint(Vector3.zAxis) --> 0, 0, 1\n```","n":0.289}}},{"i":17,"$":{"0":{"v":"Vector3.Z","n":1},"1":{"v":"\nThe Z-coordinate of a [[lang.luau.types.userdata.vector3]].\n","n":0.447}}},{"i":18,"$":{"0":{"v":"Vector3.yAxis","n":1},"1":{"v":"**[static]**\n\nA [[lang.luau.types.userdata.vector3]] with the [[lang.luau.types.userdata.vector3.y]] value `1`.\n## Examples\n```Lua\nprint(Vector3.yAxis) --> 0, 1, 0\n```","n":0.289}}},{"i":19,"$":{"0":{"v":"Vector3.Y","n":1},"1":{"v":"\nThe Y-coordinate of a [[lang.luau.types.userdata.vector3]].","n":0.447}}},{"i":20,"$":{"0":{"v":"Vector3.xAxis","n":1},"1":{"v":"**[static]**\n\nA [[lang.luau.types.userdata.vector3]] with the [[lang.luau.types.userdata.vector3.x]] value `1`.\n## Examples\n```Lua\nprint(Vector3.xAxis) --> 1, 0, 0\n```","n":0.289}}},{"i":21,"$":{"0":{"v":"Vector3.X","n":1},"1":{"v":"\nThe X-coordinate of a [[lang.luau.types.userdata.vector3]].","n":0.447}}},{"i":22,"$":{"0":{"v":"Vector3.Unit","n":1},"1":{"v":"A normalized copy of a [[lang.luau.types.userdata.vector3]] (has the same direction but the magnitude is set to `0`).","n":0.243}}},{"i":23,"$":{"0":{"v":"Vector3.one","n":1},"1":{"v":"**[static]**\n\nReturns a [[lang.luau.types.userdata.vector3]] with the values `1, 1, 1`.\n## Examples\n```Lua\nprint(Vector3.one) --> 1, 1, 1\n```","n":0.267}}},{"i":24,"$":{"0":{"v":"Vector3.new","n":1},"1":{"v":"One of the 3 constructors of the [[lang.luau.types.userdata.vector3]].\n```Lua\nVector3.new(x=0, y=0, z=0)\n```\n## Examples\n```Lua\nlocal myVector3: Vector3 = Vector3.new(13, 42, 42.5)\n```","n":0.243}}},{"i":25,"$":{"0":{"v":"Vector3.Magnitude","n":1},"1":{"v":"\nThe length of a Vector3. Calculated using the formula $|\\vec{AB}|=\\sqrt{(x_1-x_0)^2+(y_1-y_0)^2}$ (the distance formula).","n":0.277}}},{"i":26,"$":{"0":{"v":"Vector3.fromNormalId","n":1},"1":{"v":"Constructs a new Vector3 in a particular direction using a [[lang.luau.types.userdata.enum.normalid]].\n```Lua\nVector3.fromNormalId(NormalId normalId)\n```\n## Example\n```Lua\nlocal myVector3 = Vector3.fromNormalId(Enum.NormalId.Front)\n```","n":0.25}}},{"i":27,"$":{"0":{"v":"Vector3 + Vector3","n":0.577},"1":{"v":"Adds two [[lang.luau.types.userdata.vector3]]s together.\n## Examples\n```Lua\nprint(Vector3.zero + Vector3.xAxis) --> 1, 0, 0\n```","n":0.302}}},{"i":28,"$":{"0":{"v":"Instance","n":1},"1":{"v":"\nSubtype of userdata used for interacting with instances in the instance tree. All documentation relating to instances can be found [here](https://robloxapi.github.io/ref/index.html).","n":0.218}}},{"i":29,"$":{"0":{"v":"Enum","n":1}}},{"i":30,"$":{"0":{"v":"Enum.NormalId","n":1},"1":{"v":"\nUsed to indicate a direction/face.","n":0.447}}},{"i":31,"$":{"0":{"v":"Enum.NormalId.Top","n":1},"1":{"v":"\n## Value: `1`","n":0.577}}},{"i":32,"$":{"0":{"v":"Enum.NormalId.Right","n":1},"1":{"v":"\n## Value : `0`","n":0.5}}},{"i":33,"$":{"0":{"v":"Enum.NormalId.Left","n":1},"1":{"v":"\n## Value: `3`","n":0.577}}},{"i":34,"$":{"0":{"v":"Enun.NormalId.Front","n":1},"1":{"v":"\n## Value: `5`","n":0.577}}},{"i":35,"$":{"0":{"v":"Enum.NormalId.Bottom","n":1},"1":{"v":"\n## Value: `4`","n":0.577}}},{"i":36,"$":{"0":{"v":"Enum.NormalId.Back","n":1},"1":{"v":"\n## Value: `2`","n":0.577}}},{"i":37,"$":{"0":{"v":"Thread","n":1},"1":{"v":"\nA representation of a thread used by the [[lang.luau.library.coroutine]] library for asynchronous code.","n":0.277}}},{"i":38,"$":{"0":{"v":"Table","n":1},"1":{"v":"\nA generic data structure with an array and hashmap portion. Can store any datatype in Luau as either a value or key. In addition to basic syntax, the [[lang.luau.library.table]] is used to manipulate tables, and [[lang.luau.globals.pairs]] and [[lang.luau.globals.ipairs]] are used to iterate over tables. Arrays in Luau start at `1` instead of `0`.\n\nTo get a value from a table that has non-string keys, the syntax `t[k]` is used. Similar syntax is used for assignment (`t[k] = v`). Luau offers a cleaner way to get string keys that conform to variable syntax; `t.k` and `t.k = v` respectively.\n\nTo get the length of the array portion of a table, the `#` operator is used- `#t`, and will return an integer.\n\nMost of the functionality of tables can be overloaded through the use of the [[lang.luau.metatable]].\n\n## Examples\n### Array\n```Lua\nlocal t = {1, 2, 3, 4, 5}\nprint(t[1]) --> 1\nprint(t[5]) --> 5\n```\n### Dictionary/Object\n```Lua\nlocal obj = {\n    Key = 13,\n    [true] = 14,\n    [3] = function() print(\"Hello World!\") end\n}\n-- These two are both methods of accessing string keys\nprint(obj.Key) --> 13\nprint(obj[\"Key\"]) --> 13\n-- Any type can be used as a key in Luau\nprint(obj[true]) --> 14\n-- Any type can be used as a value in Luau\nobj[3]() --> \"Hello World!\"\n```\n### Hybrid\n```Lua\nlocal t = {\n    [1] = 1,\n    [2] = 2,\n    [\"Hello World!\"] = false\n}\nprint(#t) --> 2\nprint(t[2]) --> 2\nprint(t[\"Hello World!\"]) --> false\n```","n":0.067}}},{"i":39,"$":{"0":{"v":"String","n":1},"1":{"v":"\nAn immutable array of characters with a max size of `1<<30`. All functions of the [[lang.luau.library.string]] can be called as methods on strings.","n":0.209}}},{"i":40,"$":{"0":{"v":"Number","n":1}}},{"i":41,"$":{"0":{"v":"Boolean","n":1}}},{"i":42,"$":{"0":{"v":"Metatable","n":1},"1":{"v":"\nA metatable is a table full of metamethods which overload the functionality of existing types in Luau. Under the hood, every operator in Luau is essentially a function call. Metatables are primarily used to add functionality to [[lang.luau.types.userdata]], which can easily be implemented in C++.\n\n## Metamethods\n\nMetamethods are functions within metatables such as [[lang.luau.metatable.__index]] and [[lang.luau.metatable.__add]] that define the behavior of operators in Luau acting on a given type.\n\n## Interaction\n\n[[lang.luau.globals.setmetatable]] and [[lang.luau.globals.getmetatable]] are primarily used to interact with metatables.","n":0.113}}},{"i":43,"$":{"0":{"v":"__unm","n":1},"1":{"v":"```Lua\n__unm<T>(self: T): unknown\n```\nFires when the unary – operator is used on the table.","n":0.277}}},{"i":44,"$":{"0":{"v":"__tostring","n":1},"1":{"v":"```Lua\n__tostring<T>(self: T): string\n```\nFired when tostring is called on the table. Also fired when encoding tables to JSON (something to note because table keys can have objects with custom metatables).","n":0.186}}},{"i":45,"$":{"0":{"v":"__sub","n":1},"1":{"v":"```Lua\n__sub<T>(self: T, value: unknown): unknown\n```\nThe – subtraction operator.","n":0.354}}},{"i":46,"$":{"0":{"v":"__pow","n":1},"1":{"v":"```Lua\n__pow<T>(self: T, value: unknown): unknown\n```\nThe ^ exponentiation operator.","n":0.354}}},{"i":47,"$":{"0":{"v":"__newindex","n":1},"1":{"v":"```Lua\n__newindex<T>(self: T, key: unknown, value: unknown): nil\n```\nOR\n```Lua\n__newindex: table\n```\nFires when table[index] tries to be set (table[index] = value), if table[index] is nil. Can also be set to a table, in which case that table will be indexed.","n":0.167}}},{"i":48,"$":{"0":{"v":"__namecall","n":1},"1":{"v":"```Lua\n__namecall<T>(self: T, ...args): unknown\n```\nFired when methods are called on Roblox userdata. Cannot be implemented in Luau and not included in the base language. The method name is passed separately.","n":0.186}}},{"i":49,"$":{"0":{"v":"__mul","n":1},"1":{"v":"```Lua\n__mul<T>(self: T, value: unknown): unknown\n```\nThe * mulitplication operator.","n":0.354}}},{"i":50,"$":{"0":{"v":"__mode","n":1},"1":{"v":"```Lua\n__mode: \"k\" | nil\n```\nDeclares references in keys/values as either weak or strong.","n":0.289}}},{"i":51,"$":{"0":{"v":"__mod","n":1},"1":{"v":"```Lua\n__mod<T>(self: T, value: unknown): unknown\n```\nThe % modulus operator.","n":0.354}}},{"i":52,"$":{"0":{"v":"__metatable","n":1},"1":{"v":"```Lua\n__metatable: unknown | nil\n```\nIf present, locks the metatable so getmetatable will return this instead of the metatable and setmetatable will error. Non-function value.","n":0.209}}},{"i":53,"$":{"0":{"v":"__lt","n":1},"1":{"v":"```Lua\n__lt<T>(self: T, value: T): boolean\n```\nThe < less than operator¹; **NOTE**: Using the >= greater than or equal to operator will invoke this metamethod and return the opposite of what this returns, as greater than or equal to is the same as not less than.Requires two values with the same metatable and basic type (table/userdata/etc.); does not work with a table and another random table, or with a userdata and a table.","n":0.119}}},{"i":54,"$":{"0":{"v":"__len","n":1},"1":{"v":"```Lua\n__len<T>(self: T): number\n```\nFired when the # length operator is used on the Object. NOTE: Only userdatas actually respect the __len() metamethod in Lua 5.1.","n":0.204}}},{"i":55,"$":{"0":{"v":"__le","n":1},"1":{"v":"```Lua\n__le<T>(self: T, value: T): boolean\n```\nThe <= operator; NOTE: Using the > greater than operator will invoke this metamethod and return the opposite of what this returns, as greater than is the same as not less than or equal to. Requires two values with the same metatable and basic type (table/userdata/etc.); does not work with a table and another random table, or with a userdata and a table.","n":0.122}}},{"i":56,"$":{"0":{"v":"__index","n":1},"1":{"v":"```Lua\n__index<T>(self: T, key: unknown): typeof T[key]\n```\nOR\n```Lua\n__index: table\n```\nFires when self[key] is indexed, if self[key] is nil. Can also be set to a table, in which case that table will be indexed.","n":0.183}}},{"i":57,"$":{"0":{"v":"__gc","n":1},"1":{"v":"```Lua\n__gc<T>(self: T): unknown\n```\nFired when the table is garbage-collected. NOTE: On Roblox, this metamethod is disabled.","n":0.258}}},{"i":58,"$":{"0":{"v":"__eq","n":1},"1":{"v":"```Lua\n__eq<T>(self: T, value: T): boolean\n```\nThe == equal to operator. Requires two values with the same metatable and basic type (table/userdata/etc.); does not work with a table and another random table, or with a userdata and a table.","n":0.164}}},{"i":59,"$":{"0":{"v":"__div","n":1},"1":{"v":"```Lua\n__div<T>(self: T, value: unknown): unknown\n```\nThe / division operator.","n":0.354}}},{"i":60,"$":{"0":{"v":"__concat","n":1},"1":{"v":"```Lua\n__concat<T>(self: T, value: unknown): unknown\n```\nFires when the .. concatenation operator is used on the table.","n":0.258}}},{"i":61,"$":{"0":{"v":"__call","n":1},"1":{"v":"```Lua\n__call<T>(self: T, ...unknown): unknown\n```\nFires when the table is called like a function, ... is the arguments that were passed.","n":0.229}}},{"i":62,"$":{"0":{"v":"__add","n":1},"1":{"v":"```Lua\n__add<T>(self: T, value: unknown): unknown\n```\nThe + addition operator.","n":0.354}}},{"i":63,"$":{"0":{"v":"Library","n":1}}},{"i":64,"$":{"0":{"v":"Table","n":1},"1":{"v":"Library of functions used for table manipulation.","n":0.378}}},{"i":65,"$":{"0":{"v":"table.find","n":1},"1":{"v":"```Lua\ntable.find(haystack: table, needle: unknown, init?: number): nil | number | unknown\n```\nWithin the given array-like table haystack, find the first occurrence of value needle, starting from index init or the beginning if not provided. If the value is not found, nil is returned.\n\nA linear search algorithm is performed.\n## Examples\n```Lua\nlocal t = {\"a\", \"b\", \"c\", \"d\", \"e\"}\nprint(table.find(t, \"d\")) --> 4\nprint(table.find(t, \"z\")) --> nil, because z is not in the table\nprint(table.find(t, \"b\", 3)) --> nil, because b appears before index 3\n```","n":0.113}}},{"i":66,"$":{"0":{"v":"table.create","n":1},"1":{"v":"```Lua\ntable.create(count: number, value?: unknown): table\n```\nGiven an array where all elements are strings or numbers, returns the string t[i] … sep … t[i+1] … sep … t[j]. The default value for sep is an empty string, the default for i is 1, and the default for j is #t. If i is greater than j, returns the empty string.","n":0.131}}},{"i":67,"$":{"0":{"v":"table.concat","n":1},"1":{"v":"```Lua\ntable.concat(t: {[number]: any}, separator?: string, i=1, j?: number): string\n```\nConcatenates the provided table into a string using the given separator.","n":0.229}}},{"i":68,"$":{"0":{"v":"table.clear","n":1},"1":{"v":"```Lua\ntable.clear(table: table): nil\n```\nSets the value for all keys within the given table to nil. This causes the # operator to return 0 for the given table. The allocated capacity of the table’s array portion is maintained, which allows for efficient re-use of the space.\n\nThis function does not delete/destroy the table provided to it. This function is meant to be used specifically for tables that are to be re-used.\n\n## Examples\n```Lua\nlocal grades = {95, 82, 71, 92, 100, 60}\nprint(grades[4], #grades) --> 92, 6\ntable.clear(grades)\nprint(grades[4], #grades) --> nil, 0\n-- If grades is filled again with the same number of entries,\n-- no potentially expensive array resizing will occur\n-- because the capacity was maintained by table.clear.\n```","n":0.095}}},{"i":69,"$":{"0":{"v":"String","n":1}}},{"i":70,"$":{"0":{"v":"Globals","n":1},"1":{"v":"\nGlobals included with Luau.","n":0.5}}},{"i":71,"$":{"0":{"v":"xpcall","n":1},"1":{"v":"```Lua\nxpcall(f: function, err: function, ...args?: unknown): boolean, ...unknown?\n```\nThis function is similar to pcall, except that you can set a new error handler.\n\nxpcall calls function f in protected mode, using err as the error handler, and passes a list of arguments. Any error inside f is not propagated; instead, xpcall catches the error, calls the err function with the original error object, and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In this case, xpcall also returns all results from the call, after this first result. In case of any error, xpcall returns false plus the result from err.","n":0.094}}},{"i":72,"$":{"0":{"v":"unpack","n":1},"1":{"v":"```Lua\nunpack(t: table, i=1, j?: number): ...unknown\n```\nReturns the elements from the given table. By default, i is 1 and j is the length of list, as defined by the length operator.","n":0.183}}},{"i":73,"$":{"0":{"v":"type","n":1},"1":{"v":"```Lua\ntype(v: unknown): \"number\" | \"string\" | \"boolean\" | \"table\" | \"function\" | \"thread\" | \"userdata\" | \"vector\"\n```\nReturns the type of its only argument, coded as a string. The possible results of this function are \"nil\" (a string, not the value nil), \"number\", \"string\", \"boolean\", \"table\", \"function\", \"thread\", \"userdata\", and in Roblox, \"vector\".","n":0.139}}},{"i":74,"$":{"0":{"v":"tostring","n":1},"1":{"v":"```Lua\ntostring(v: unknown): string\n```\nReceives an argument of any type and converts it to a string in a reasonable format. For complete control of how numbers are converted, use string.format. If the metatable of e has a __tostring metamethod, then it will be called with e as the only argument and will return the result.\n## Examples\n```Lua\nlocal isRobloxCool = true\n-- Convert the boolean to a string then concatenate:\nprint(\"Roblox is cool: \" .. tostring(isRobloxCool)) --> Roblox is cool: true\n```","n":0.115}}},{"i":75,"$":{"0":{"v":"tonumber","n":1},"1":{"v":"```Lua\ntonumber(v: unknown): number?\n```\nAttempts to convert the arg into a number with a specified base to interpret the value in. If it cannot be converted, this function returns nil.\n\nThe base may be any integer between 2 and 36, inclusive. In bases above 10, the letter ‘A’ (in either upper or lower case) represents 10, ‘B’ represents 11, and so forth, with ‘Z’ representing 35. In base 10 (the default), the number may have a decimal part, as well as an optional exponent part. In other bases, only unsigned integers are accepted.\n\nIf a string begins with “0x” and a base is not provided, the 0x is trimmed and the base is assumed to be 16, or hexadecimal.\n## Examples\n```Lua\nprint(tonumber(\"1337\")) --> 1337 (assumes base 10, decimal)\nprint(tonumber(\"1.25\")) --> 1.25 (base 10 may have decimal portions)\nprint(tonumber(\"3e2\")) --> 300 (base 10 may have exponent portion, 3 &times; 10 ^ 2)\nprint(tonumber(\"25\", 8)) --> 21 (base 8, octal)\nprint(tonumber(\"0x100\")) --> 256 (assumes base 16, hexadecimal)\nprint(tonumber(\"roblox\")) --> nil (does not raise an error)\n-- Tip: use with assert if you would like unconvertable numbers to raise an error\nprint(assert(tonumber(\"roblox\"))) --> Error: assertion failed\n```","n":0.075}}},{"i":76,"$":{"0":{"v":"setmetatable","n":1},"1":{"v":"```Lua\nsetmetatable<T: table | string | userdata>(t: T, metatable: table): T\n```\nSets the metatable for the given table t to newMeta. If newMeta is nil, the metatable of t is removed. Finally, this function returns the table t which was passed to it. If t already has a metatable whose __metatable metamethod is set, calling this on t raises an error.\n## Examples\n```Lua\nlocal meta = {__metatable = \"protected\"}\nlocal t = {}\nsetmetatable(t, meta) -- This sets the metatable of t\n-- We now have a table, t, with a metatable. If we try to change it...\nsetmetatable(t, {}) --> Error: cannot change a protected metatable\n```","n":0.101}}},{"i":77,"$":{"0":{"v":"setfenv","n":1},"1":{"v":"```Lua\nsetfenv<F: function>(environment: F | number, fenv: table): F?\n```\nSets the environment to be used by the given function. f can be a function or a number that specifies the function at that stack level: Level 1 is the function calling setfenv. setfenv returns the given function.\n\nAs a special case, when f is 0 setfenv changes the environment of the running thread. In this case, setfenv returns no values.","n":0.122}}},{"i":78,"$":{"0":{"v":"select","n":1},"1":{"v":"```Lua\nselect(index: \"#\" | number, ...args: unknown): ...unknown\n```\nReturns all arguments after argument number index. If negative, it will return from the end of the argument list.\n\nReturns the total number of arguments that were passed after the cmd argument, which must be \"#\" to use select in this fashion.\n## Examples\n### CMD String Argument\n```Lua\nprint(select(\"#\", \"A\", \"B\", \"C\")) --> 3\n```\n### Number Argument\n```Lua\nprint(select(2, \"A\", \"B\", \"C\")) --> B C\nprint(select(-1, \"A\", \"B\", \"C\")) --> C\n```","n":0.12}}},{"i":79,"$":{"0":{"v":"rawset","n":1},"1":{"v":"```Lua\nrawset<T: table>(t: T, k: unknown, v: unknown): T\n```\nSets the real value of table[index] to a given value, without invoking any metamethod.","n":0.218}}},{"i":80,"$":{"0":{"v":"rawget","n":1},"1":{"v":"```Lua\nrawget(t: table, key: unknown): unknown\n```\nGets the real value of table[index], without invoking any metamethod.","n":0.267}}},{"i":81,"$":{"0":{"v":"rawequal","n":1},"1":{"v":"```Lua\nrawequal(v1: unknown, v2: unknown): boolean\n```\nChecks whether v1 is equal to v2, without invoking any metamethod.","n":0.258}}},{"i":82,"$":{"0":{"v":"print","n":1},"1":{"v":"```Lua\nprint(...args: unknown): void\n```\nReceives any number of arguments, and prints their values to the output. print is not intended for formatted output, but only as a quick way to show a value, typically for debugging. For a formatted output, use string.format. On Roblox, print does not call tostring, but will metatables for the the __tostring metamethod.","n":0.135}}},{"i":83,"$":{"0":{"v":"pcall","n":1},"1":{"v":"```Lua\npcall(func: function, ...args?: unknown): boolean, ...unknown?\n```\nCalls the function func with the given arguments in protected mode. This means that any error inside func is not propagated; instead, pcall catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, pcall also returns all results from the call, after this first result. In case of any error, pcall returns false plus the error message.","n":0.111}}},{"i":84,"$":{"0":{"v":"pairs","n":1},"1":{"v":"```Lua\npairs<T: table>(t: T): function, T\n```\nReturns an iterator function, the passed table t and nil, so that the construction will iterate over all key/value pairs of that table when used in a generic for-loop. This is a wrapper for [[lang.luau.globals.next]].\n## Examples\n```Lua\nlocal scores = { [\"John\"] = 5, [\"Sally\"] = 10 }\nfor name, score in pairs(scores) do\n    print(name .. \" has score: \" .. score) -- \"John has score: 5\" etc\nend\n```","n":0.12}}},{"i":85,"$":{"0":{"v":"newproxy","n":1},"1":{"v":"\n```Lua\nnewproxy(addMetatable=false): userdata\n```\nCreates and returns a new userdata with or without a metatable. If created with a metatable it can be readily modified with [[lang.luau.globals.getmetatable]], and if not, will have to be created using [[lang.luau.globals.setmetatable]].\n\n## Examples\n```Lua\nlocal myUserdata = newproxy(true)\ngetmetatable(myUserdata).__index = {1, 2, 3}\nprint(type(myUserdata)) --> \"userdata\"\nprint(myUserdata[1]) --> 1\n```\n","n":0.147}}},{"i":86,"$":{"0":{"v":"loadstring","n":1},"1":{"v":"```Lua\nloadstring<T: string>(code: T): function | nil, T, string | nil\n```\nLoads Lua code from a string, and returns it as a function. If the code is invalid, the error is returned as the third member of the tuple.","n":0.164}}},{"i":87,"$":{"0":{"v":"ipairs","n":1},"1":{"v":"```Lua\nipairs<T: table>(t: T): function, T, number\n```\nReturns three values: an iterator function, the table t and the number 0. Each time the iterator function is called, it returns the next numerical index-value pair in the table. When used in a generic for-loop, the return values can be used to iterate over each numerical index in the table.\n## Examples\n```Lua\nlocal fruits = {\"apples\", \"orangs\", \"kiwi\"}\nfor index, fruit in ipairs(fruits) do\n    print(index, fruit) --> 1 apples, 2 oranges, 3 kiwi\nend\n```","n":0.115}}},{"i":88,"$":{"0":{"v":"getmetatable","n":1},"1":{"v":"```Lua\ngetmetatable<T: table | string | userdata>(t: T): T?\n```\nReturns the [[lang.luau.metatable]] of the given table t if it has one, otherwise returns nil. If t does have a [[lang.luau.metatable]], and the [[lang.luau.metatable.__metatable]] metamethod is set, it returns that value instead.\n## Examples\n```Lua\n-- Demonstrate getmetatable:\nlocal meta = {}\nlocal t = setmetatable({}, meta)\nprint(getmetatable(t) == meta) --> true\n-- Make the original metatable unrecoverable by setting the __metatable metamethod:\nmeta.__metatable = \"protected\"\nprint(getmetatable(t)) --> protected\n```","n":0.122}}},{"i":89,"$":{"0":{"v":"getfenv","n":1},"1":{"v":"```Lua\ngetfenv(stack: number | function): table\n```\nReturns the current environment in use by the caller.\n\n- If provided with a function, the environment of the function will be returned.\n- If provided with an integer, getfenv will provide the environment of the function at the provided stack level: Level 1 is the function calling getfenv. If stack is 0, getfenv returns the global environment of the current script. When using getfenv to get the current environment of a script, it will return the same table every time within the specific thread.\n## Examples\n### Getting Current Environment\n```Lua\nmyVariable = \"Hello, environments\" -- Note: a global variable (non-local)\nlocal env = getfenv()\nprint(env[\"myVariable\"]) --> Hello, environments\n```\n### Getting the Environment of a Function\n```Lua\nfunction printMessage()\n    print(message)\nend\nlocal env = getfenv(printMessage)\nenv.message = \"Hello, function environments\"\nprintMessage() --> Hello, function environments\n```\n### Getting the Environment of a Stack\n```Lua\nfunction whatIsThePassword()\n    local env = getfenv(1) -- Get the environment 1 level up, or whatever called this function\n    print(env.password) -- Get the password from the environment one level up\n    print(password) --> nil\nend\n    \nfunction openSesame()\n    local password = \"secret\" -- A variable local to openSesame\n    whatIsThePassword()\nend\nopenSesame()\n```","n":0.076}}},{"i":90,"$":{"0":{"v":"error","n":1},"1":{"v":"```Lua\nerror(message: string, level: number): void\n```\nTerminates the last protected function called and outputs message as an error message. If the function containing the error is not called in a protected function (pcall), then the script which called the function will terminate. The error function itself never returns and acts like a script error.\n\nThe level argument specifies how to get the error position. With level 1 (the default), the error position is where the error function was called. Level 2 points the error to where the function that called error was called; and so on. Passing a level 0 avoids the addition of error position information to the message.","n":0.097}}},{"i":91,"$":{"0":{"v":"collectgarbage","n":1},"1":{"v":"```Lua\ncollectgarbage(\"count\" | \"collect\"): number\n```\nPerforms an operation on the Lua garbage collector based on the specified option.\n\nRoblox’s Lua sandbox only allows the “count” option to be used, so none of the other standard options are available.\n\nThe \"count\" option returns the total memory in use by Lua (in kilobytes).","n":0.146}}},{"i":92,"$":{"0":{"v":"assert","n":1},"1":{"v":"```Lua\nassert<T>(value: T, msg: string): T\n```\nThrows an error if the provided `value` is `false` or `nil`. If the assertion passes, it returns all values passed to it.\n## Examples\n```Lua\nlocal product = 90 * 4\nassert(product == 360, \"Oh dear, multiplication is broken\")\n-- The line above does nothing, because 90 times 4 is 360\n```","n":0.141}}},{"i":93,"$":{"0":{"v":"_VERSION","n":1},"1":{"v":"The current interpreter version. In Luau, this should return 'luau'.","n":0.316}}},{"i":94,"$":{"0":{"v":"_G","n":1},"1":{"v":"A shared table that exists across the Luau environment.","n":0.333}}},{"i":95,"$":{"0":{"v":"Dendron","n":1}}},{"i":96,"$":{"0":{"v":"Publish","n":1},"1":{"v":"\n## To publish to github pages, must perform the following:\nRun\n```\nnpm init -y\nnpm install @dendronhq/dendron-cli\n```\nto initialize the npm project and install the module.\n\nThen add `.next` to the `.gitignore` file.\n\nTo configure nextjs, run\n```\nnpx dendron publish init\n```\nand then add\n```\nsite:\n    assetsPrefix: /{REPO-NAME}\n    siteUrl: https://{GITHUB-USERNAME}.github.io[/{Optional subdomain}]\n```\nto the existing yaml tree in `root-schema.yaml`.\n\nThen you can run `npx dendron publish dev` to ensure the site is working, and finally \n```\nnpx dendron publish export --target github\n```\nto build.\n\nIf github pages is configured, all you have to do is push the repository!","n":0.11}}}]}
